import nltk
from nltk.chat.util import Chat, reflections
from sys import version_info
from string import punctuation 
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import PorterStemmer, WordNetLemmatizer

from flask import Flask, render_template, request
from flask.templating import render_template
app = Flask(__name__)

pairs = [
 [
 r"How can I avail internet reservation facility through credit cards?",
 ['Recently internet reservation facility has started on Indian Railways. The web site http://www.irctc.co.in is operational, wherein you can get the railway reservation done through Credit Cards.For more on Reservation through credit cards click here Internet Reservation',]
 ],
 [
 r'Why are PNR and reservation availability queries not available after certain timings at night?',
 ['The online PNR and seat availability queries are fetched from the computerized reservation applications. These online reservation applications are shut down daily around 2330 hrs to 0030 hrs IST. Due to the dynamic changes taking place in the PNR status updation and the availability positions, these two types of queries have to be fetched from the online reservation applications, hence the non- availability of them after certain timings. The sheer size of these databases does not allow them to be copied over network lines.Please note that the web site is functional 24 hrs. a day and other queries (trains between any two stations, fare queries, etc.) are functional throughout the day.',]
 ],
 [
 r'How can I avail the enquiries, through SMS on mobile phones?',
 ['Now all the enquiries offered on the web site www.indianrail.gov.in are available on your mobile phone through SMS facility. For more information on the mobile service providers and the key words to be used on the mobile, please click here, SMS help . Please note that we are giving the backend service only for the SMS queries. For more information and help on key words and SMS facility, kindly contact the mobile service provider according to the table.',]
 ],
 [
 r'Why do sometimes the fonts, colors schemes and java scripts behave differently in some browser or browsers?',
 ['This web site is best viewed with Microsoft Internet Explorer 6.0 and above. It might not give desired results with other browsers. All the pages, color schemes and scripts have been tested for IE 6.0 and above. ',]
 ],
 [
 r'Where can I get the latest arrival and departure timings of trains, when they get delayed?',
 ['The latest arrival and departure timings of delayed trains, alongwith diverted routes etc. will be made available shortly on this web site only.',]
 ],
 [
 r'Where can I lodge complaint against any type of grievances in the Trains, Platforms, officials for problems on this web site and give suggestions?',
 ['The complaint software is presently under development. We try our best to forward your grievances to the concerned department. However please note that this is not always possible. Please note that all your complaints and suggestions for the improvement of the web site http://www.indianrail.gov.in can be put on the Feedback & suggestions page. Please note that, in case of any problems, give the query type (hyper link), the inputs which you gave, and the exact error message generated by this web site. All this will help us in solving the problems quickly. In the absence of such inputs, we cannot solve the problems.',]
 ],
 [
 r"my name is (.*)",
 ["Hello %1, How are you today ?",]
 ],
 [
 r"what is your name ?",
 ["My name is Chatty and I'm a chatbot ?",]
 ],
 [
 r"how are you ?",
 ["I'm doing good\nHow about You ?",]
 ],
 [
 r"sorry (.*)",
 ["Its alright","Its OK, never mind",]
 ],
 [
 r"i'm (.*) doing good",
 ["Nice to hear that","Alright :)",]
 ],
 [
 r"hi|hey|hello",
 ["Hello", "Hey there",]
 ],
 [
 r"(.*) age?",
 ["I'm a computer program dude\nSeriously you are asking me this?",]

 ],
 [
 r"what (.*) want ?",
 ["Make me an offer I can't refuse",]

 ],
 [
 r"(.*) created ?",
 ["Nagesh created me using Python's NLTK library ","top secret ;)",]
 ],
 [
 r"(.*) (location|city) ?",
 ['Chennai', 'Tamil Nadu',]
 ],
 [
 r"how is weather in (.*)?",
 ["Weather in %1 is awesome like always","Too hot man here in %1","Too cold man here in %1","Never even heard about %1"]
 ],
 [
 r"i work in (.*)?",
 ["%1 is an Amazing company, I have heard about it. But they are in huge loss these days.",]
 ],
 [
 r"(.*)raining in (.*)",
 ["No rain since last week here in %2","Damn its raining too much here in %2"]
 ],
 [
 r"how (.*) health(.*)",
 ["I'm a computer program, so I'm always healthy ",]
 ],
 [
 r"(.*) (sports|game) ?",
 ["I'm a very big fan of Football",]
 ],
 [
 r"who (.*) sportsperson ?",
 ["Messy","Ronaldo","Roony"]
 ],
 [
 r"who (.*) (moviestar|actor)?",
 ["Brad Pitt"]
 ],
 [ 
 r"quit",
 ["BBye take care. See you soon :) ","It was nice talking to you. See you soon :)"]
 ],
 [ 
 r"(.*)algorithm(.*)",
 ["This might help you: http://ilp/fp2/Generic/USM2/page/8"]
 ], 

 [ 
 r"(.*)select query",
 ["select query-http://ilp/fp2/Generic/USM4/page/89"]
 ],
 [ 
 r"(.*)assignment 6",
 ["to start with, check whether the number is greater than 5"]
 ],

 [ 
 r"(.*)looping condition",
 ["check whether the number is not greater 1 and not equal to 0"]
 ],

 [ 
 r"(.*)looping statement",
 ["try using while at starting."]
 ],
 [ 
 r"(.*)inside while loop",
 ["try giving conditions using if-else statement"]
 ],
[ 
 r"(.*)last digit of (.*) number",
 ["number mod 10 will give you the last digit of the number"]
 ], 
 [ 
 r"(.*) run length encoding",
 ["Run length Encoding also known as RLE is probably the most basic encoding method that's being used in different fields of computing like, Multimedia Formats etc. In this tutorial we'll be looking at how RLE works and a basic python example which implements RLE"]
 ], 
 [ 
 r"(.*) count the sequence",
 ["run the for loop till the length of the string and compare the element and next element"]
 ],
 [ 
 r"(.*) check the sequence",
 ["write an if statement to check the sequence"]
 ],
 [ 
 r"(.*) reinitialize the count",
 ["in else condition update the final string and then initialize the count"]
 ],
 [ 
 r"(.*) logic for the if condition in assignment9",
 ["check the current element with next element; if both results same then increment count"]
 ],
 [ 
 r"(.*) logic for else condition in assignment9",
 ["update the current count and the character to the final string and then update the count with '1'"]
 ],
 [ 
 r"how to add (.*) last character to the final string in assignment9(.*)",
 ["add the last character of the message out side the for loop"]
 ],
 [ 
 r"how to get (.*) last character in assignment9(.*)",
 ["get the last character with the length of the message minus 1"]
 ],
 [
 r"(.*) accep(.*) username,dictionary and employee number in assignment 7",
 ["pass all of them as parameters i.e validate_employee(emp_dict, username, emp_no)",]
 ],
 [
 r"dictionary ?",
 ["refer http://ilp/fp2/Generic/USM1/page/116"]
 ],
 [
 r"(.*) check given employee number exists in (.*) dictionary ?",
 ["use IN keyword"]
 ],
 [
 r"(.*) check whether username must be at least 4 characters ?",
 ["use len(username)"]
 ],
 [
 r"(.*) match first three letters last three letters",
 ["refer http://ilp/fp2/Generic/USM1/page/105"]
 ],
 [
 r"(.*) perform case insensitive comparison",
 ["use str.lower() function"]
 ],
 [
 r"how to check the results in assignment 7",
 ["call the function validate_employee() by passing required parameters"]
 ],
 [
 r"(.*)populate the leap years into a list",
 ["you can use append function i,e., sample_list.append(element).",]
 ],
 [
 r"(.*)find whether the given year is leap year or not",
 ["given_year should be divisible by 4 and given_year should not be divisible by 100 or given_year should be divisible by 400.",]
 ],
 [
 r"(.*)generate next 15 leap years from a given year",
 ["You can use a for loop or while loop with appropriate condition(you can use a count variable)",]
 ],
 [
 r"(.*)find whether the year is leap year or not",
 ["You can use a for loop or while loop with appropriate condition(you can use a count variable).",]
 ],
 [
 r"functions to populate the leap years into a list",
 ["you can use append function i,e., sample_list.append(element).",]
 ],
 [
 r"(.*)common_characters(.*) ",
 ["set of characters that are same in a list"]
] ,
 [
 r"(.*)how to load msgs in a list",
 ["create an empty list and then load your message in it"]
],
 [r"(.*)how to iterate in a list",
 ["you can use for loop for iteration, (for i in something: print expression"]
],
[r"(.*)how to check the result",
 ["the common characters should appear in a separate list"] 
 ],
[
 r"(.*)how to solve a program/problem statement",
 ["you can create a common method and incorporate all the logic in that."],
 ], 
[ 
 r"how (.*) (ignore|avoid|ignor|) (blankspace|whitespace|nullspace)",
 ["use 2 replace functions .one for whitespacce and one for single quote .Refer the link'http://ilp/fp2/Generic/USM1/page/145'"]
 ],
 [ 
 r"how (.*) (perform|do|carryout|carry) case-sensitive (operation|function)",
 ["Use upper() and lower() function for case-sensitive function"]
 ],
 [ 
 r"(.*) entire (idea|knowledge)",
 ["Use upper() and lower() function for case-sensitive function"]
 ],
 [ 
 r"(.*) add (elements|element) to the new list",
 ["Use append function to add new elements to the new list"]
 ],
 [ 
 r"(.*) add (elements|element) to the new list",
 ["Use append function to add new elements to the new list"]
 ],
 [ 
 r"(.*) important functions (.*) code",
 ["upper(),lower(),append(),replace()"]
 ],
]
user_input=""
b_response=""
def unique(list1):
 unique_list = []
 for x in list1:
  if x not in unique_list:
   unique_list.append(x)
   return(unique_list)
lemmatiser = WordNetLemmatizer()
def preprocessing (sent) :
 rem_words = ['get', 'avail', 'who' , 'where', 'how' , 'what', 'why' , 'when', 'I', 'can']
 for p in list(punctuation):
 sent=sent.replace(p,'')
 sent=sent.lower().split()
 stop_words = set(stopwords.words('english'))
 sent = [i for i in sent if not i in stop_words]
 sent = [i for i in sent if not i in rem_words]
 sent = [lemmatiser.lemmatize(item, pos="v") for item in sent ]
 return(unique(sent))

@app.route('/home')
def index():
 return render_template('project1.html')

@app.route('/process',methods=['GET','POST'])
def process():
 if request.method=='POST':
 while(1):
 user_input = request.form['user_input']
 if user_input == 'q':
 break
 i=0
 chosen = len(pairs) 
 matches = 0
 list_response=preprocessing(user_input) 
 while (i<len(pairs)):
 loc_matches = 0 
 x=pairs[i][0] + " ".join(pairs[i][1])
 list_pair=preprocessing(x)
 for word in list_pair:
 if word in list_response:
 loc_matches=loc_matches+1
 if ( loc_matches > matches ):
 chosen = i 
 matches = loc_matches
 i = i + 1 
 if ( chosen <len(pairs) ) :
 ans=pairs[chosen][1]
 b_response=ans[0]
else :
 print("Unable to answer this question" ) 
 break
while(input('Continue [Y/N]') not in [ 'n','N'] ):
 process()
 return render_template('project1.html',user_input=user_input,bot_response=b_response) 
if __name__=='__main__':
 app.run(debug=True,port=5002)
